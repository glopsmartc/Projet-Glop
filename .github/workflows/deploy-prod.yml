name: CI/CD Pipeline Prod

on:
  push:
    branches:
      - main

env:
  IP_ADDRESS_BACK: ${{ secrets.IP_ADDRESS_BACK }}

jobs:
  compile:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up JDK for compilation
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # Compile the backend project
      - name: Compile Backend Project
        working-directory: .
        run: |
          mvn clean compile
          echo "Compilation successful"

  sonarcloud-analysis:
    runs-on: ubuntu-latest
    needs: compile

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21 for SonarCloud Analysis
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and SonarCloud analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_SECRET }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=glopsmartc_Projet-Glop-Backend

  build:
    runs-on: ubuntu-latest
    needs:  sonarcloud-analysis

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up JDK for backend tests
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # Set up Profile Production
      - name: Set production profile
        run: |
          sed -i 's/spring.profiles.active=dev/spring.profiles.active=prod/g' ./src/main/resources/application.properties

      # Docker configuration
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/glop-backend:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Install OpenVPN Client
        run: sudo apt-get update && sudo apt-get install openvpn

      - name: Download VPN Configuration
        run: |
          wget https://infotuto.univ-lille.fr/fileadmin/user_upload/infotuto/images/DSI/Fichiers_telechargeables/Clients_VPN/ULILLE_VPN_ETUDIANT_Linux_v4.zip
          unzip ULILLE_VPN_ETUDIANT_Linux_v4.zip

      - name: OpenVPN-Connect
        uses: kota65535/github-openvpn-connect-action@v2.1.0
        with:
          config_file: ULILLE_VPN_ETU_TCP_v4_Linux.ovpn
          username: ${{ secrets.VPN_USERNAME }}
          password: ${{ secrets.VPN_PASSWORD }}

      - name: Set permissions for private key
        run: chmod 600 ma-paire.pem

      - name: Stop and Remove Existing Container
        run: |
          ssh -i ma-paire.pem -o StrictHostKeyChecking=no ubuntu@$IP_ADDRESS_BACK 'sudo docker stop backend-container || true && sudo docker rm backend-container || true'

      - name: Pull Backend Docker Image
        run: |
          ssh -i ma-paire.pem -o StrictHostKeyChecking=no ubuntu@$IP_ADDRESS_BACK 'sudo docker pull ${{ secrets.DOCKER_USERNAME }}/glop-backend:${{ github.sha }}'

      - name: Run New Backend Container
        run: |
          ssh -i ma-paire.pem -o StrictHostKeyChecking=no ubuntu@$IP_ADDRESS_BACK 'sudo docker run -d --name backend-container -p 80:8080 ${{ secrets.DOCKER_USERNAME }}/glop-backend:${{ github.sha }}'
